<?xml version="1.0" encoding="utf-8"?>

<launch>
    <arg name="offline"          default="false"/>
    <include unless="$(arg offline)" 
        file="$(find realsense2_camera)/launch/rs_camera.launch">
        <arg name="serial_no" value="116622071599"/>
        <arg name="align_depth" value="true"/>
        <arg name="linear_accel_cov" value="1.0"/>
        <!--<arg name="unite_imu_method" value="linear_interpolation"/>-->
        <arg name="unite_imu_method" value="copy"/>
        <arg name="filters" value="pointcloud"/>
    </include>
    
    <node pkg="imu_filter_madgwick" type="imu_filter_node" name="ImuFilter">
        <param name="use_mag" type="bool" value="false" />
        <param name="_publish_tf" type="bool" value="false" />
        <param name="_world_frame" type="string" value="enu" />
        <remap from="/imu/data_raw" to="/camera/imu"/>
    </node>
	
   
    <include file="$(find rtabmap_ros)/launch/rtabmap.launch">
        <arg name="args" value="--delete_db_on_start --RGBD/LoopClosureReextractFeatures true
--Vis/MinInliers 10"/>
        <arg name="rgb_topic" value="/camera/color/image_raw"/>
        <arg name="depth_topic" value="/camera/aligned_depth_to_color/image_raw"/>
        <arg name="camera_info_topic" value="/camera/color/camera_info"/>
        <arg name="depth_camera_info_topic" value="/camera/depth/camera_info"/>
        <arg name="rtabmapviz" value="false"/>
        <arg name="rviz" value="true"/>
    </include>

<!--
    <include file="$(find robot_localization)/launch/ukf_template.launch"/>
    <param name="/ukf_se/frequency" value="300"/>
    <param name="/ukf_se/base_link_frame" value="camera_link"/>
    <param name="/ukf_se/odom0" value="rtabmap/odom"/>
    <rosparam param="/ukf_se/odom0_config">[true,true,true,
                                            true,true,true,
                                            true,true,true,
                                            true,true,true,
                                            true,true,true]
    </rosparam>
    <param name="/ukf_se/odom0_relative" value="true"/>
    <param name="/ukf_se/odom0_pose_rejection_threshold" value="10000000"/>
    <param name="/ukf_se/odom0_twist_rejection_threshold" value="10000000"/>
    <param name="/ukf_se/imu0" value="/imu/data"/>
    <rosparam param="/ukf_se/imu0_config">[false, false, false,
                                           true,  true,  true,
                                           true,  true,  true,
                                           true,  true,  true,
                                           true,  true,  true]
    </rosparam>
    <param name="/ukf_se/imu0_differential" value="true"/>
    <param name="/ukf_se/imu0_relative" value="false"/>
    <param name="/ukf_se/use_control" value="false"/>
    
    
-->
    <!-- <param name="/ukf_se/odom0_config" value="{true,true,true,}"/> -->
    
  <!-- Publish tf 'base_footprint' as pose.-->
  <node pkg="elevation_mapping_demos" type="odom_to_pose_publisher.py" name="waffle_pose_publisher" output="screen">
  </node>
  
      <!-- RANSAC plane detection node -->
  <!--<node pkg="lidar_basic" type="process_lidar" name="plane_detection" output="screen"/>-->
  
  <!-- Launch elevation mapping node. -->
  <node pkg="elevation_mapping" type="elevation_mapping" name="elevation_mapping" output="screen">
    <rosparam command="load" file="$(find elevation_mapping_demos)/config/robots/realsense.yaml" />
    <!--<rosparam command="load" file="$(find elevation_mapping)/config/sensor_processors/realsense_d435.yaml" />-->
    <!--<rosparam command="load" file="$(find elevation_mapping_demos)/config/postprocessing/postprocessor_pipeline.yaml" />-->
  </node>
  
  <!--
    <node pkg="elevation_mapping" type="elevation_mapping" name="elevation_mapping_plane" output="screen">
    <rosparam command="load" file="$(find elevation_mapping_demos)/config/robots/realsense_plane.yaml" />
    <rosparam command="load" file="$(find elevation_mapping)/config/sensor_processors/realsense_d435.yaml" />
    <rosparam command="load" file="$(find elevation_mapping_demos)/config/postprocessing/postprocessor_pipeline.yaml" />
  </node>
 -->
  
    <!-- Launch the OpenCV node -->
  <!--<node pkg="grid_map_demos" type="opencv" name="grid_map_opencv" output="screen" />-->
  <node pkg="elevation_mapping" type="sub.py" name="listener" output="screen" />
  
  
  <!--
  <node pkg="elevation_mapping" type="get_submap.py" name="get_submap_node" output="screen"/>
  -->
  <!-- Launch RViz with the demo configuration. -->
  <!--<node name="rviz" pkg="rviz" type="rviz" args="-d $(find elevation_mapping_demos)/rviz/turtlebot3_waffle_demo.rviz" />-->

</launch>
